name: Deploy site to Pages
on:
  push:
    branches: [main]
  pull_request:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build
        run: ${{ steps.detect-package-manager.outputs.runner }} build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download All Artifacts
        uses: actions/download-artifact@v5
        with:
          path: build-artifacts
          pattern: github-pages
      - name: List artifact items
        run: |
          ls -R build-artifacts
          npx --yes http-server build-artifacts -p 3456 > /tmp/http-server.log 2>&1 &
          SERVER_PID=$!
          sleep 3
          echo "Testing registry accessibility..."
          curl -f http://localhost:3456/r/hello-grafana.json || { echo "Failed to access registry"; kill $SERVER_PID; exit 1; }
          echo "Registry is accessible"
          echo "Creating test plugin"
          npx @grafana/create-plugin@latest --pluginType datasource --hasBackend false --pluginName ui --orgName yesoreyeram && 
          cd yesoreyeram-ui-datasource &&
          rm src/module.ts &&
          cp ../testing/module.tsx.txt src/module.tsx
          cp ../testing/components.json .
          cp ../testing/tsconfig.json.txt ./tsconfig.json
          cp ../testing/webpack.config.ts.txt ./webpack.config.ts
          ls -Rl ./*.{json,config.ts}
          ls -Rl ./src/*.{ts,tsx}
          npm install
          npx --yes shadcn@latest add http://localhost:3456/r/hello-grafana.json --overwrite --yes
          # Verify component was added correctly
          echo "Verifying hello grafana component..."
          if [ -f "src/components/hello-grafana/hello-grafana.tsx" ]; then
            echo "✓ Hello Grafana component added to correct location"
          else
            echo "✗ Hello Grafana component NOT in expected location"
          fi
          cat package.json | jq ".dependencies" | grep upper-case  
          echo "building the plugin"
          npx webpack@5.94.0 -c ./webpack.config.ts --env production
          echo "Stopping the server"
          kill $SERVER_PID || true
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to gitHub pages
        id: deployment
        uses: actions/deploy-pages@v4
