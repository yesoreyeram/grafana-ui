name: Test & Deploy
on:
  push:
    branches: [main]
  pull_request:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build the registry & demo app
        run: ${{ steps.detect-package-manager.outputs.runner }} build
      - name: Building a plugin with the components from registry
        run: |
          echo "Starting http-server"
          npx --yes http-server out -p 3456 > /tmp/http-server.log 2>&1 &
          SERVER_PID=$!
          sleep 15
          echo "Testing registry accessibility..."
          curl -f http://localhost:3456/r/hello-grafana.json || { echo "Failed to access registry"; kill $SERVER_PID; exit 1; }
          echo ""
          echo "Registry is accessible"
          echo "Creating test plugin"
          npx @grafana/create-plugin@latest --pluginType datasource --hasBackend false --pluginName ui --orgName yesoreyeram
          cd yesoreyeram-ui-datasource
          echo "Copying required files"
          rm src/module.ts
          cp ../testing/module.tsx.txt src/module.tsx
          cp ../testing/components.json .
          cp ../testing/tsconfig.json.txt ./tsconfig.json
          cp ../testing/webpack.config.ts.txt ./webpack.config.ts
          ls -Rl ./*.{json,config.ts}
          ls -Rl ./src/*.{ts,tsx}
          echo "Installing dependencies"
          npm install
          echo "Installing components"
          npx --yes shadcn@latest add http://localhost:3456/r/hello-grafana.json --overwrite --yes
          # Verify component was added correctly
          echo "Verifying hello grafana component..."
          if [ -f "src/components/hello-grafana/hello-grafana.tsx" ]; then
            echo "✓ Hello Grafana component added to correct location"
          else
            echo "✗ Hello Grafana component NOT in expected location"
          fi
          cat package.json | jq ".dependencies" | grep upper-case
          echo "Updating plugin package.json build script to webpack command"
          node -e 'const fs=require("fs");const p="package.json";if(!fs.existsSync(p)){console.error("package.json not found");process.exit(1);}const j=JSON.parse(fs.readFileSync(p));j.scripts=j.scripts||{};j.scripts.build="webpack -c ./webpack.config.ts --env production";fs.writeFileSync(p,JSON.stringify(j,null,2)+"\n");console.log("Updated scripts.build in",p);'
          echo "package.json build script : $(cat package.json | jq '.scripts.build')"
          echo "Building plugin"
          npm run build
          echo "Stopping the server & cleanup"
          kill $SERVER_PID || true
      - name: Upload plugin build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-artifacts
          path: ./yesoreyeram-ui-datasource/dist
      - name: Upload site build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: build-artifacts
          path: ./out
  test:
    name: E2E Plugin Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Download plugin artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-build-artifacts
          path: ./grafana-plugins/yesoreyeram-ui-datasource
      - name: Verify plugin files
        run: |
          echo "Listing plugin directory contents:"
          ls -la ./grafana-plugins/yesoreyeram-ui-datasource/
          echo ""
          echo "Checking for required files:"
          if [ -f "./grafana-plugins/yesoreyeram-ui-datasource/module.js" ]; then
            echo "✓ module.js found"
          else
            echo "✗ module.js not found"
            exit 1
          fi
      - name: Start Grafana container
        run: |
          docker run -d \
            --name grafana \
            -p 3000:3000 \
            -e GF_AUTH_ANONYMOUS_ENABLED=true \
            -e GF_AUTH_ANONYMOUS_ORG_ROLE=Admin \
            -e GF_PATHS_PLUGINS=/var/lib/grafana/plugins \
            -v $(pwd)/grafana-plugins:/var/lib/grafana/plugins \
            grafana/grafana-enterprise:latest
          
          echo "Waiting for Grafana to start..."
          max_attempts=60
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:3000/api/health 2>/dev/null; then
              echo "Grafana is ready!"
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - waiting for Grafana..."
            sleep 2
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Grafana failed to start in time"
            docker logs grafana
            exit 1
          fi
          
          # Give it a bit more time to fully initialize
          sleep 5
          
          # Verify plugin is loaded
          echo "Checking if plugin is loaded..."
          docker logs grafana | tail -50
      - name: Install Playwright
        run: |
          npm install -D @playwright/test@latest
          npx playwright install --with-deps chromium
      - name: Run Playwright E2E tests
        run: npx playwright test
        env:
          GRAFANA_URL: http://localhost:3000
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
      - name: Cleanup
        if: always()
        run: |
          docker logs grafana || true
          docker stop grafana || true
          docker rm grafana || true
  deploy:
    name: Publish to Github Pages
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to gitHub pages
        id: deployment
        uses: actions/deploy-pages@v4
